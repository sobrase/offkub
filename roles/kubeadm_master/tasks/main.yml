---
# Initialize or join Kubernetes control plane nodes

- name: Determine if this is the first master
  set_fact:
    is_first_master: "{{ inventory_hostname == groups['masters'][0] }}"

- name: Check if node already part of cluster
  stat:
    path: /etc/kubernetes/kubelet.conf
  register: kubelet_conf
  become: true

- block:
    - name: Generate kubeadm configuration
      template:
        src: kubeadm_config.yaml.j2
        dest: /tmp/kubeadm_config.yaml
        mode: '0644'
      when: not kubelet_conf.stat.exists
      become: true

    - name: Initialize Kubernetes control plane
      shell: kubeadm init --config /tmp/kubeadm_config.yaml --upload-certs
      register: kubeadm_init
      when: not kubelet_conf.stat.exists
      become: true

    - name: Retrieve certificate key
      shell: kubeadm init phase upload-certs --upload-certs | tail -1
      register: cert_key
      changed_when: false
      become: true

    - name: Wait for API server to be reachable
      shell: kubectl --kubeconfig /etc/kubernetes/admin.conf get --raw=/healthz
      register: apiserver_status
      retries: 20
      delay: 5
      until: apiserver_status.rc == 0
      changed_when: false
      become: true

    - name: Generate base join command for control plane
      shell: kubeadm token create --print-join-command
      register: base_join_cmd
      changed_when: false
      become: true

    - name: Compose full control plane join command
      set_fact:
        cp_join_cmd: "{{ base_join_cmd.stdout }} --control-plane --certificate-key {{ cert_key.stdout }}"

    - name: Generate join command for workers
      shell: kubeadm token create --print-join-command
      register: worker_join_cmd
      changed_when: false
      become: true

    - name: Write control plane join script
      copy:
        content: "{{ cp_join_cmd }}\n"
        dest: /tmp/join-master.sh
        mode: '0755'
      become: true

    - name: Write worker join script
      copy:
        content: "{{ worker_join_cmd.stdout }}\n"
        dest: /tmp/join.sh
        mode: '0755'
      become: true
  when: is_first_master

- block:
    - name: Get control plane join command from first master
      command: cat /tmp/join-master.sh
      delegate_to: "{{ groups['masters'][0] }}"
      register: master_join_cmd

    - name: Join this master to the existing control plane
      shell: "{{ master_join_cmd.stdout }} --cri-socket unix://{{ cri_socket }}"
      register: join_result
      when: not kubelet_conf.stat.exists
      become: true

    - name: Fail if kubeadm join failed
      fail:
        msg: "kubeadm join failed with rc {{ join_result.rc }}: {{ join_result.stderr }}"
      when:
        - not kubelet_conf.stat.exists
        - join_result.rc != 0
      become: true
  when: not is_first_master

- name: Ensure .kube directory exists for root
  file:
    path: /root/.kube
    state: directory
    mode: '0700'
  become: true

- name: Copy admin kubeconfig
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes
    mode: '0600'
  become: true

- name: Export KUBECONFIG for subsequent tasks
  set_fact:
    kubectl_env:
      KUBECONFIG: /etc/kubernetes/admin.conf
  become: true

- name: Remove master taint to allow scheduling on control plane
  shell: |
    kubectl taint nodes $(hostname) node-role.kubernetes.io/control-plane- || true
  environment: "{{ kubectl_env }}"
  when: kubelet_conf.stat.exists
  become: true

- block:
    - name: Download Calico manifest from asset server
      get_url:
        url: "http://{{ asset_server_host }}:{{ asset_server_port }}/images/calico.yaml"
        dest: /tmp/calico.yaml
        mode: '0644'
        timeout: 30
      become: true

    - name: Apply Calico CRDs (initial pass)
      shell: kubectl apply -f /tmp/calico.yaml || true
      environment: "{{ kubectl_env }}"
      become: true
      failed_when: false

    - name: Wait for FelixConfiguration CRD
      shell: kubectl get crd felixconfigurations.crd.projectcalico.org
      register: crd_result
      retries: 10
      delay: 5
      until: crd_result.rc == 0
      environment: "{{ kubectl_env }}"
      changed_when: false
      become: true

    - name: Apply Calico manifest
      shell: kubectl apply -f /tmp/calico.yaml
      environment: "{{ kubectl_env }}"
      become: true

    - name: Wait for Calico pods to be ready
      shell: |
        kubectl get pods -n kube-system -l k8s-app=calico-node -o jsonpath='{.items[*].status.phase}'
      register: calico_status
      until: calico_status.stdout.split() | unique == ['Running']
      retries: 20
      delay: 15
      environment: "{{ kubectl_env }}"
      changed_when: false
      become: true
  when: is_first_master
