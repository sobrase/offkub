---
# Offline setup of a Docker registry on the master node

- name: Ensure directory for Docker packages exists
  file:
    path: /tmp/docker_debs
    state: directory
    mode: '0755'
  become: yes

# Download the Docker engine .deb files from the master HTTP service
- name: Download Docker packages from asset server
  get_url:
    url: "http://{{ asset_server_host }}:{{ asset_server_port }}/pkgs/{{ item }}"
    dest: "/tmp/docker_debs/{{ item }}"
    mode: '0644'
    timeout: 30
  loop: "{{ registry_docker_packages }}"
  become: yes

# Install Docker from local packages
- name: Install Docker packages
  shell: dpkg -i /tmp/docker_debs/*.deb
  become: yes

- name: Enable and start Docker service
  systemd:
    name: docker
    enabled: yes
    state: started
  become: yes

# Configure Docker daemon to use the insecure local registry
- name: Configure Docker daemon for insecure registry
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "insecure-registries": ["{{ registry_host }}:{{ registry_port }}"],
        "allow-nondistributable-artifacts": ["{{ registry_host }}:{{ registry_port }}"]
      }
    mode: '0644'
  notify: Restart docker
  become: yes

- name: Set registry image tar name
  set_fact:
    registry_image_tar: "registry_2.8.2.tar"

# Load the registry image from local tarball
- name: Download registry image tarball from asset server
  get_url:
    url: "http://{{ asset_server_host }}:{{ asset_server_port }}/images/{{ registry_image_tar }}"
    dest: /tmp/registry.tar
    mode: '0644'
    timeout: 60
  become: yes

- name: Load registry image
  shell: docker load -i /tmp/registry.tar
  become: yes

- name: Ensure registry container is running
  shell: |
    if ! docker ps -a --format '{{"{{"}}.Names{{"}}"}}' | grep -q '^registry$'; then
      docker run -d -p {{ registry_port }}:5000 --restart=always --name registry registry:2
    else
      docker start registry
    fi
  args:
    executable: /bin/bash
  become: yes

# Define lists of images to load into the registry
- name: Define Kubernetes images
  set_fact:
    kube_core_images:
      - "kube-apiserver_{{ kube_version }}.tar"
      - "kube-controller-manager_{{ kube_version }}.tar"
      - "kube-scheduler_{{ kube_version }}.tar"
      - "kube-proxy_{{ kube_version }}.tar"
      - "etcd.tar"
      - "coredns.tar"
      - "pause.tar"
    calico_images:
      - "calico-cni_{{ calico_image_version }}.tar"
      - "calico-node_{{ calico_image_version }}.tar"
      - "calico-kube-controllers_{{ calico_image_version }}.tar"
    nvidia_plugin_image: "nvidia-device-plugin_{{ device_plugin_version }}.tar"

# Download Kubernetes core image tarballs
- name: Download Kubernetes core images
  get_url:
    url: "http://{{ asset_server_host }}:{{ asset_server_port }}/images/{{ item }}"
    dest: "/tmp/{{ item }}"
    mode: '0644'
    timeout: 60
  loop: "{{ kube_core_images }}"
  become: yes

# Load Kubernetes core images and push them to the local registry
- name: Load and push Kubernetes core images
  shell: |
    img=$(docker load -i /tmp/{{ item }} | awk '/Loaded image:/ {print $3}')
    name=$(echo "$img" | awk -F/ '{print $NF}')
    docker tag $img {{ registry_host }}:{{ registry_port }}/$name
    docker push {{ registry_host }}:{{ registry_port }}/$name
  args:
    executable: /bin/bash
  loop: "{{ kube_core_images }}"
  become: yes

# Download Calico images
- name: Download Calico images
  get_url:
    url: "http://{{ asset_server_host }}:{{ asset_server_port }}/images/{{ item }}"
    dest: "/tmp/{{ item }}"
    mode: '0644'
    timeout: 60
  loop: "{{ calico_images }}"
  become: yes

# Load Calico networking images and push to the registry
- name: Load and push Calico images
  shell: |
    img=$(docker load -i /tmp/{{ item }} | awk '/Loaded image:/ {print $3}')
    name=$(echo "$img" | awk -F/ '{print $NF}')
    docker tag $img {{ registry_host }}:{{ registry_port }}/$name
    docker push {{ registry_host }}:{{ registry_port }}/$name
  args:
    executable: /bin/bash
  loop: "{{ calico_images }}"
  become: yes

# Download NVIDIA device plugin image
- name: Download NVIDIA device plugin image
  get_url:
    url: "http://{{ asset_server_host }}:{{ asset_server_port }}/images/{{ nvidia_plugin_image }}"
    dest: "/tmp/{{ nvidia_plugin_image }}"
    mode: '0644'
    timeout: 60
  become: yes

# Load NVIDIA device plugin image and push
- name: Load and push NVIDIA device plugin image
  shell: |
    img=$(docker load -i /tmp/{{ nvidia_plugin_image }} | awk '/Loaded image:/ {print $3}')
    name=$(echo "$img" | awk -F/ '{print $NF}')
    docker tag $img {{ registry_host }}:{{ registry_port }}/$name
    docker push {{ registry_host }}:{{ registry_port }}/$name
  args:
    executable: /bin/bash
  become: yes

# Optional verification that the registry is serving
- name: Verify local registry catalog
  shell: curl -sf http://{{ registry_host }}:{{ registry_port }}/v2/_catalog
  register: registry_check
  changed_when: false
  become: yes
